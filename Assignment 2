Code for Playing cards in ocaml language.

type pip = Two | Three | Four | Five | Six | Seven | Eight | Nine | Ten | 
           Jack | Queen | King | Ace 
let pips = [Two; Three; Four; Five; Six; Seven; Eight; Nine; Ten;
            Jack; Queen; King; Ace]
type suit = Diamonds | Spades | Hearts | Clubs
let suits = [Diamonds; Spades; Hearts; Clubs]
type card = pip * suit
let full_deck = Array.of_list (List.concat (List.map (fun pip -> List.map (fun suit -> (pip, suit)) suits) pips))
let shuffle deck =
  for i = Array.length deck - 1 downto 1 do
    let j = Random.int (i+1) in
    let temp = deck.(i) in
    deck.(i) <- deck.(j);
    deck.(j) <- temp
  done


Code for catalans number in ocaml language  

let catalan : int ref = ref 0 in
Printf.printf "%d ," 1 ;
for i = 2 to 9  do
let nm : int ref = ref 1 in
let den : int ref = ref 1 in
for k = 2 to i do
nm := (!nm)*(i+k);
den := (!den)*k;
catalan := (!nm)/(!den) ;
done;
print_int (!catalan); print_string "," ;
done;;

output:
1 ,2,5,14,42,132,429,1430,4862

code for combinations in ocaml language(Dynamic Programming Solution)

let comb m xs =
  let xs = Array.of_list xs in
 
  if m > Array.length xs then
    []
  else begin
 
    let arr = Array.make (m+1) [] in
    arr.(0) <- [[]];
 
    for j = 0 to Array.length xs - m do
      for i = 1 to m do
       arr.(i) <- arr.(i) @ List.map (fun ys -> xs.(j+i-1)::ys) arr.(i-1)
      done 
    done;
 
    arr.(m)
 
  end
;;
comb 3 [0;1;2;3;4];;
